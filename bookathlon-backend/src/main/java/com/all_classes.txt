package com.bookathlon;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BookathlonBackendApplication {

	public static void main(String[] args) {
		SpringApplication.run(BookathlonBackendApplication.class, args);
	}

}
package com.bookathlon.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig{
	
	@Bean //raga sto usando i beans
	 public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
          .authorizeHttpRequests(auth -> auth
              .requestMatchers("/", "/register", "/login", "/css/**", "/js/**").permitAll()
              .anyRequest().authenticated()
          )
          .formLogin(form -> form
              .loginPage("/login")
              .defaultSuccessUrl("/", true)
              .permitAll()
          )
          .logout(logout -> logout
        		    .logoutUrl("/logout") // definisce l’URL per il logout
        		    .logoutSuccessUrl("/") // reindirizza alla login con messaggio
        		    .permitAll()
        		);

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {	//cifra le password nel DB
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
	
}package com.bookathlon.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

import com.bookathlon.entities.Utente;
import com.bookathlon.service.UtenteService;

import jakarta.validation.Valid;

@Controller
public class ControllerAutenticazione {
	
	@Autowired
	private UtenteService utenteService;
	
	@GetMapping("/register")
	public String mostraFormRegistrazione(Model model) {
		model.addAttribute("utente", new Utente());
        return "register";
	}
	
	
	@PostMapping("/register")
public String processRegister(@Valid @ModelAttribute("utente") Utente utente,
                              BindingResult result,
                              Model model) {

    if (utenteService.existsByEmail(utente.getEmail())) {
        result.rejectValue("email", "error.utente", "Email già registrata");
    }

    if (utenteService.existsByUsername(utente.getUsername())) {
        result.rejectValue("username", "error.utente", "Username già esistente");
    }

    if (result.hasErrors()) {
        return "register";
    }

     utente.setRuolo("USER");
    utenteService.addUtente(utente);
    return "redirect:/login";

}
	 
	 @GetMapping("/login")
	    public String showLoginForm() {
	        return "login";
	 }
}
package com.bookathlon.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import com.bookathlon.entities.Libro;
import com.bookathlon.service.LibroService;

@Controller
public class HomeController {

	@Autowired
	private LibroService libroService;
	
	@GetMapping("/")
	public String homePage(Model m) {
		
		// I libri piu letti (i primi 5 almeno)
        List<Libro> libriTendenza = libroService.getLibriDiTendenza();

        // List di tutti i libri
        List<Libro> tuttiLibri = libroService.getLibri();

        // Hashmap per raggrupparli per generi per le card della home
        Map<String, List<Libro>> libriPerGenere = new HashMap<>();
        for (Libro libro : tuttiLibri) {
            String genere = libro.getGenere();
            if (genere != null) {
                libriPerGenere.putIfAbsent(genere, new ArrayList<>());
                libriPerGenere.get(genere).add(libro);
            }
        }

        // passaggio dati a thymeleaf
        m.addAttribute("tendenze", libriTendenza);
        m.addAttribute("libriPerGenere", libriPerGenere);

        return "home"; 
	}
	
	
	
}
package com.bookathlon.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.bookathlon.entities.LibreriaUtente;
import com.bookathlon.entities.Utente;
import com.bookathlon.repos.UtenteRepository;
import com.bookathlon.service.LibreriaUtenteService;

@Controller
@RequestMapping("/libreria")
public class LibreriaController {

	@Autowired
    private LibreriaUtenteService libreriaService;
	
	@Autowired
	private UtenteRepository utenteRepo;

	 @GetMapping
	    public String mostraLibreria(Model m, @AuthenticationPrincipal UserDetails userDetails) {
	        String username = userDetails.getUsername();
	        Utente utente = utenteRepo.findByUsername(username);
	        Long utenteId = utente.getId();

	        List<LibreriaUtente> letti = libreriaService.getLibriByStato(utenteId, "LETTO");
	        List<LibreriaUtente> daLeggere = libreriaService.getLibriByStato(utenteId, "DA_LEGGERE");

	        m.addAttribute("letti", letti);
	        m.addAttribute("daLeggere", daLeggere);
	        return "libreria";
	    }
	 
	  @PostMapping("/aggiungi")
	    public String aggiungiLibro(
	            @RequestParam Long libroId,
	            @RequestParam String stato,
	            @AuthenticationPrincipal UserDetails userDetails) {

	        String username = userDetails.getUsername();
	        Utente utente = utenteRepo.findByUsername(username);

	        libreriaService.aggiungiLibro(utente.getId(), libroId, stato);

	        return "redirect:/"; // non so dove fare il redirect
	  }
	  
	  @PostMapping("/rimuovi")
	  public String rimuoviLibro(
		        @RequestParam Long libroId,
		        @AuthenticationPrincipal UserDetails userDetails) {

		    String username = userDetails.getUsername();
		    Utente utente = utenteRepo.findByUsername(username);

		    libreriaService.rimuoviLibro(utente.getId(), libroId);

		    return "redirect:/libreria";
	  }
	 
}
package com.bookathlon.controller;

import java.util.List;

// Importazioni delle annotazioni Spring per costruire il controller REST
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.bookathlon.entities.Utente;
import com.bookathlon.service.UtenteService;

// Indica che questa classe è un controller REST,restituisce dati
@RestController
public class UtenteREST {

    @Autowired
    private UtenteService service;

// Metodo che gestisce le richieste GET all'endpoint "api/utenti"
    @GetMapping("api/utenti")
    public List<Utente> getUtenti() {
        return service.getUtenti();  // restituisce la lista di tutti gli utenti
    }

// Metodo che gestisce le richieste POST all'endpoint "api/utenti"
    @PostMapping("api/utenti")
    public Utente addUtente(@RequestBody Utente u) {
        return service.addUtente(u);  // Richiede al service di salvare il nuovo utente ricevuto nel corpo della richiesta
    }

// Gestisce le richieste GET con parametro dinamico {id}
// Richiede al service di cercare l'utente con l'ID specificato
    @GetMapping("api/utenti/{id}")
    public Utente getUtenteById(@PathVariable Long id) {
        return service.getUtenteById(id);  
    }
}
package com.bookathlon.entities;

import java.time.LocalDate;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.IdClass;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

@Entity
@Table(name = "libreria_utente")
@IdClass(LibreriaUtenteId.class)
public class LibreriaUtente {

	@Id
	@ManyToOne
	@JoinColumn(name= "utente_id")
	private Utente utente;
	
	@Id
    @ManyToOne
    @JoinColumn(name = "libro_id")
    private Libro libro;
	
	@Column(nullable = false)
    private String stato;
	
	@Column(name = "data_aggiunta")
    private LocalDate dataAggiunta = LocalDate.now();

	public LibreriaUtente() {}
	
	public Utente getUtente() {
		return utente;
	}

	public void setUtente(Utente utente) {
		this.utente = utente;
	}

	public Libro getLibro() {
		return libro;
	}

	public void setLibro(Libro libro) {
		this.libro = libro;
	}

	public String getStato() {
		return stato;
	}

	public void setStato(String stato) {
		this.stato = stato;
	}

	public LocalDate getDataAggiunta() {
		return dataAggiunta;
	}

	public void setDataAggiunta(LocalDate dataAggiunta) {
		this.dataAggiunta = dataAggiunta;
	}
	
	
	
}
package com.bookathlon.entities;

import java.io.Serializable;
import java.util.Objects;

import jakarta.persistence.Column;
import jakarta.persistence.Id;

//per gestire chiave composta, mi serve a JPA per sapere come identificare una riga univoca nella tabella libreria_utente


public class LibreriaUtenteId implements Serializable{

	@Id
	@Column(name= "utente_id")
	private Long utente;
	
	@Id
	@Column(name = "libro_id")
	private Long libro;
	
	public LibreriaUtenteId() {}

	public Long getUtente() {
		return utente;
	}

	public void setUtente(Long utente) {
		this.utente = utente;
	}

	public Long getLibro() {
		return libro;
	}

	public void setLibro(Long libro) {
		this.libro = libro;
	}

	@Override
	public boolean equals(Object o) {
	    if (this == o) {
	        return true;
	    }
	    if (o == null) {
	        return false;
	    }
	    if (getClass() != o.getClass()) {
	        return false;
	    }
	    LibreriaUtenteId other = (LibreriaUtenteId) o;
	    if (utente == null) {
	        if (other.utente != null) {
	            return false;
	        }
	    } else if (!utente.equals(other.utente)) {
	        return false;
	    }
	    if (libro == null) {
	        if (other.libro != null) {
	            return false;
	        }
	    } else if (!libro.equals(other.libro)) {
	        return false;
	    }
	    return true;
	}


	@Override
	public int hashCode() {
	    return Objects.hash(utente, libro);
	}
	
	
}
package com.bookathlon.entities;

import java.time.LocalDate;

// Importa le annotazioni JPA che permettono di collegare la classe Java a una tabella del database.
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity   // Indica a Spring che questa classe rappresenta una tabella del database
@Table(name="libro")  // Specifica che è collegata alla tabella 'libro' nel database

public class Libro {
	
// Ogni attributo è mappato su una colonna della tabella libro.Spring e JPA si occuperà automaticamente della conversione
	@Id // Identifica il campo 'id' come chiave primaria della tabella
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String isbn;
	private String titolo;
	private String autore;
	private String genere;
	private LocalDate data_pubblicazione;
	private String url_copertina;

	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getIsbn() {
		return isbn;
	}
	public void setIsbn(String isbn) {
		this.isbn = isbn;
	}
	public String getTitolo() {
		return titolo;
	}
	public void setTitolo(String titolo) {
		this.titolo = titolo;
	}
	public String getAutore() {
		return autore;
	}
	public void setAutore(String autore) {
		this.autore = autore;
	}
	public String getGenere() {
		return genere;
	}
	public void setGenere(String genere) {
		this.genere = genere;
	}
	public LocalDate getData_pubblicazione() {
		return data_pubblicazione;
	}
	public void setData_pubblicazione(LocalDate data_pubblicazione) {
		this.data_pubblicazione = data_pubblicazione;
	}
	public String getUrl_copertina() {
		return url_copertina;
	}
	public void setUrl_copertina(String url_copertina) {
		this.url_copertina = url_copertina;
	}
	
	
	
	
	
	

// I metodi getter e setter servono per accedere e modificare i valori degli attributi.

	
	
	}
	
package com.bookathlon.entities;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.Pattern;
@Entity   // Indica che questa classe rappresenta una tabella nel database
@Table(name = "utente")   // Specifica che è collegata alla tabella chiamata "utente"
public class Utente {

    @Id  // Questo campo è la chiave primaria
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Il valore viene generato automaticamente dal DB,autoincremento
    @Column(name = "id")
    private Long id;

    @NotBlank(message = "Lo username è obbligatorio")
    @Size(min = 3, max = 50, message = "Lo username deve avere tra 3 e 50 caratteri")
    @Column(nullable = false, unique = true)// Lo username è un campo obbligatorio e deve essere unico nel DB
    private String username;

    @NotBlank(message = "La password è obbligatoria")
    @Pattern(
        regexp = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()–[{}]:;',?/*~$^+=<>]).{8,}$",
        message = "La password deve contenere almeno 8 caratteri, un numero, una lettera maiuscola, una minuscola e un carattere speciale"
         )
    @Column(nullable = false)  //La password è obbligatoria e deve essere cifrata prima di salvarla nel DB
    private String password;
    
    @NotBlank(message = "L'email è obbligatoria")
    @Email(message = "Email non valida")
    @Column(nullable = false, unique = true)
    private String email;

    @Column(nullable = false)  // Campo obbligatorio
    private String ruolo;



    public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	

	public String getRuolo() {
		return ruolo;
	}

	public void setRuolo(String ruolo) {
		this.ruolo = ruolo;
	}

	public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
    
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }


}
package com.bookathlon.repos;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import com.bookathlon.entities.LibreriaUtente;
import com.bookathlon.entities.LibreriaUtenteId;

public interface LibreriaUtenteRepository extends JpaRepository<LibreriaUtente, LibreriaUtenteId> { 

	List<LibreriaUtente> findByUtenteId(Long utenteId);
	
	List<LibreriaUtente> findByUtenteIdAndStato(Long utenteId, String stato);
	
}
	

package com.bookathlon.repos;


import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.bookathlon.entities.Libro;

@Repository
public interface LibroRepository extends JpaRepository<Libro, Long>{

	//Libro findById(Long libroId);

	
}
package com.bookathlon.repos;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.bookathlon.entities.Utente;

@Repository
public interface UtenteRepository extends JpaRepository<Utente, Long> {

    // login 
    Utente findByUsername(String username);
    Utente findByEmail(String email);
}package com.bookathlon.service;

import java.util.List;

import com.bookathlon.entities.LibreriaUtente;

public interface LibreriaUtenteService {

	List<LibreriaUtente> getLibreriaUtente(Long utenteId);
    List<LibreriaUtente> getLibriByStato(Long utenteId, String stato);
    LibreriaUtente aggiungiLibro(Long utenteId, Long libroId, String stato);
    void rimuoviLibro(Long utenteId, Long libroId);
	
}
package com.bookathlon.service;

import java.time.LocalDate;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bookathlon.entities.LibreriaUtente;
import com.bookathlon.entities.LibreriaUtenteId;
import com.bookathlon.entities.Libro;
import com.bookathlon.entities.Utente;
import com.bookathlon.repos.LibreriaUtenteRepository;
import com.bookathlon.repos.LibroRepository;
import com.bookathlon.repos.UtenteRepository;

@Service
public class LibreriaUtenteServiceImpl implements LibreriaUtenteService {

	@Autowired
    private LibreriaUtenteRepository repo;

    @Autowired
    private UtenteRepository utenteRepo;

    @Autowired
    private LibroRepository libroRepo;
    
	@Override
	public List<LibreriaUtente> getLibreriaUtente(Long utenteId) {
		return repo.findByUtenteId(utenteId);
	}

	@Override
	public List<LibreriaUtente> getLibriByStato(Long utenteId, String stato) {
		return repo.findByUtenteIdAndStato(utenteId, stato);
	}

	@Override
	public LibreriaUtente aggiungiLibro(Long utenteId, Long libroId, String stato) {
		Utente utente = utenteRepo.findById(utenteId).orElseThrow();
        Libro libro = libroRepo.findById(libroId).orElseThrow();
        LibreriaUtente entry = new LibreriaUtente();
      
        entry.setUtente(utente);
        entry.setLibro(libro);
        entry.setStato(stato);
        entry.setDataAggiunta(LocalDate.now());

        return repo.save(entry);
	}

	@Override
	public void rimuoviLibro(Long utenteId, Long libroId) {
		LibreriaUtenteId id = new LibreriaUtenteId();
	    
	    Utente utente = utenteRepo.findById(utenteId).orElseThrow();
	    Libro libro = libroRepo.findById(libroId).orElseThrow();
	    
	    id.setUtente(utente.getId());
	    id.setLibro(libro.getId());

	    repo.deleteById(id);

	}

}
package com.bookathlon.service;

import java.util.List;

import com.bookathlon.entities.Libro;

public interface LibroService {

	
	List<Libro> getLibri();
	Libro getLibroById(Long id);
	Libro addLibro(Libro l);
	List<Libro> getLibriDiTendenza();
	
}
package com.bookathlon.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.bookathlon.entities.Libro;
import com.bookathlon.repos.LibroRepository;

@Service
public class LibroServiceImpl implements LibroService {
	@Autowired
	private LibroRepository repo;
	
	@Override
	public List<Libro> getLibri() {
		
		return repo.findAll();
	}

	@Override
	public Libro getLibroById(Long id) {
		return repo.findById(id).orElse(null);
	}

	@Override
	public Libro addLibro(Libro l) {
		return repo.save(l);
	}
	

	@Override
	public List<Libro> getLibriDiTendenza() {
		List<Libro> tutti = repo.findAll();
	    return tutti.stream().limit(5).toList();
	}
	
}
package com.bookathlon.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.bookathlon.entities.Utente;
import com.bookathlon.repos.UtenteRepository;

//cerca username e password creando un oggetto UserDetails per verificare password e ruolo dal db

@Service
public class MyUserDetailsService implements UserDetailsService {

	@Autowired
	private UtenteRepository utenterepo;
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // Cerca l'utente nel database usando lo username
        Utente utente = utenterepo.findByUsername(username);
        if(utente==null) {
        	 throw new UsernameNotFoundException("nessun utente: " + username);
        }
        	 List<GrantedAuthority> ruoli = new ArrayList<>();
             ruoli.add(new SimpleGrantedAuthority("RUOLO_" + utente.getRuolo()));
             
             return new User(utente.getUsername(), utente.getPassword(), ruoli);
        	 
        }
}
	
	
package com.bookathlon.service;

import java.util.List;
import com.bookathlon.entities.Utente;

public interface UtenteService {
    List<Utente> getUtenti();
    Utente getUtenteById(Long id);
    Utente addUtente(Utente u);
    boolean existsByEmail(String email);
    boolean existsByUsername(String username);
}package com.bookathlon.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.bookathlon.entities.Utente;
import com.bookathlon.repos.UtenteRepository;

@Service
public class UtenteServiceImpl implements UtenteService {

    @Autowired
    private UtenteRepository dao;
    
    @Autowired
    private PasswordEncoder passwordEncoder;	//crittatore di password

    @Override
    public List<Utente> getUtenti() {
        return dao
        		.findAll();
    }

    @Override
    public Utente getUtenteById(Long id) {
        return dao.findById(id)
        		.orElse(null);
    }

    @Override
    public Utente addUtente(Utente u) {
        u.setPassword(passwordEncoder.encode(u.getPassword()));
    	return dao
        		.save(u);
    }

	@Override
	public boolean existsByEmail(String email) {
		return dao.findByEmail(email) != null;
	}

	@Override
	public boolean existsByUsername(String username) {
		return dao.findByUsername(username) != null;
	}
}